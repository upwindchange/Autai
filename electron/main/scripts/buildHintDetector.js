#!/usr/bin/env node

import { readFileSync, writeFileSync, mkdirSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import typescript from 'typescript';

const __dirname = dirname(fileURLToPath(import.meta.url));

function compileTSToJS(tsCode, fileName) {
  const compilerOptions = {
    module: typescript.ModuleKind.None,
    target: typescript.ScriptTarget.ES2020,
    lib: ["es2020", "dom"],
    strict: true,
    skipLibCheck: true,
    esModuleInterop: false,
    allowSyntheticDefaultImports: true,
    forceConsistentCasingInFileNames: true,
    removeComments: false,
    sourceMap: false,
    declaration: false,
  };

  const result = typescript.transpileModule(tsCode, {
    compilerOptions,
    fileName,
  });

  if (result.diagnostics && result.diagnostics.length > 0) {
    const diagnostics = result.diagnostics.map(d => 
      typescript.flattenDiagnosticMessageText(d.messageText, '\n')
    ).join('\n');
    throw new Error(`TypeScript compilation errors:\n${diagnostics}`);
  }

  return result.outputText;
}

async function buildHintDetector() {
  console.log('Building hintDetector.js...');
  
  const scriptsDir = __dirname;
  const projectRoot = join(__dirname, '../../../');
  const distDir = join(projectRoot, 'dist-electron/main/scripts');
  
  // Ensure the output directory exists
  mkdirSync(distDir, { recursive: true });
  
  try {
    // Read hintDetector.ts source
    const hintDetectorTsPath = join(scriptsDir, 'hintDetector.ts');
    if (!existsSync(hintDetectorTsPath)) {
      throw new Error(`hintDetector.ts not found at: ${hintDetectorTsPath}`);
    }
    
    const hintDetectorTsCode = readFileSync(hintDetectorTsPath, 'utf-8');
    
    // Compile TypeScript to JavaScript
    console.log('Compiling TypeScript to JavaScript...');
    let hintDetectorCode = compileTSToJS(hintDetectorTsCode, 'hintDetector.ts');
    
    // Read css-selector-generator from node_modules or fetch it
    const cssSelectorPaths = [
      join(projectRoot, 'node_modules/css-selector-generator/build/index.js'),
      join(projectRoot, 'node_modules/css-selector-generator/dist/index.js'),
      // Also check in devDependencies location
      join(projectRoot, 'node_modules/.pnpm/css-selector-generator@3.6.9/node_modules/css-selector-generator/build/index.js'),
    ];
    
    let cssSelectorCode = null;
    for (const path of cssSelectorPaths) {
      if (existsSync(path)) {
        cssSelectorCode = readFileSync(path, 'utf-8');
        console.log(`Found css-selector-generator at: ${path}`);
        break;
      }
    }
    
    if (!cssSelectorCode) {
      // If css-selector-generator is not in node_modules, we need to install it temporarily
      console.log('css-selector-generator not found in node_modules, installing temporarily...');
      
      // Check if we're in CI/CD environment
      const isCI = process.env.CI || process.env.GITHUB_ACTIONS;
      
      try {
        // Use npm ci if in CI, otherwise npm install
        const installCmd = isCI 
          ? 'npm ci --include=dev'
          : 'npm install css-selector-generator@^3.6.9 --no-save';
          
        execSync(installCmd, { 
          cwd: projectRoot,
          stdio: 'inherit'
        });
      } catch (installError) {
        console.warn('Failed to install via npm, trying alternative approach...');
        
        // Alternative: Download the UMD build directly
        console.log('Downloading css-selector-generator UMD build...');
        const response = await fetch('https://unpkg.com/css-selector-generator@3.6.9/build/index.js');
        if (!response.ok) {
          throw new Error(`Failed to download css-selector-generator: ${response.statusText}`);
        }
        cssSelectorCode = await response.text();
      }
      
      // Try again after installation
      if (!cssSelectorCode) {
        for (const path of cssSelectorPaths) {
          if (existsSync(path)) {
            cssSelectorCode = readFileSync(path, 'utf-8');
            console.log(`Found css-selector-generator at: ${path}`);
            break;
          }
        }
      }
    }
    
    if (!cssSelectorCode) {
      throw new Error('Failed to find or download css-selector-generator');
    }
    
    // Create the combined script
    const combinedScript = `
// Combined HintDetector with CSS Selector Generator
// Generated by buildHintDetector.js
(function() {
  "use strict";
  
  // CSS Selector Generator Library (UMD build)
  ${cssSelectorCode}
  
  // Make getCssSelector available in the current scope
  const getCssSelector = (typeof window !== 'undefined' && window.CssSelectorGenerator) 
    ? window.CssSelectorGenerator.getCssSelector 
    : (typeof globalThis !== 'undefined' && globalThis.CssSelectorGenerator)
    ? globalThis.CssSelectorGenerator.getCssSelector
    : undefined;
  
  // Hint Detector Script (compiled from TypeScript)
  ${hintDetectorCode}
})();
`;
    
    // Write the combined script to both locations
    const outputPath = join(distDir, 'hintDetector.js');
    writeFileSync(outputPath, combinedScript);
    
    console.log(`âœ“ Built hintDetector.js with css-selector-generator bundled`);
    console.log(`  Output: ${outputPath}`);
    
    // Also copy to the source directory for development
    const devPath = join(scriptsDir, 'hintDetector.js');
    writeFileSync(devPath, combinedScript);
    console.log(`  Dev copy: ${devPath}`);
    
  } catch (error) {
    console.error('Error building hintDetector:', error);
    process.exit(1);
  }
}

// Run the build
buildHintDetector();